services:

  app:
    image: app
    restart: on-failure
    build:
      context: ./app
      dockerfile: Dockerfile
    command: npm start
    container_name: app
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./public:/app/public
    networks:
      - app

  database:
    image: postgres:16.3-alpine3.20
    restart: on-failure
    container_name: database
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app

  nginx:
    image: nginx:1.23.3-alpine-slim
    restart: on-failure
    container_name: nginx
    depends_on:
      - app
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./public:/public
    ports:
      - '80:80'
    networks:
      - app

  mailhog:
    image: mailhog/mailhog:v1.0.1
    restart: on-failure
    container_name: mailhog
    ports:
      - '8025:8025'
    logging:
      driver: none
    networks:
      - app

networks:
  app:
    driver: bridge
